// generated 2002/12/1 21:56:20 PST by mdb@baltic.(none)
// using glademm V1.1.3c_cvs
//
// DO NOT EDIT THIS FILE ! It was created using
// /usr/local/bin/glade-- --gnome2 lookuplet.glade
// for gtk 2.0.9 and gtkmm 2.0.0
//
// Please modify the corresponding derived classes in ./src/properties.cc

#include "config.h"
#include "properties_glade.hh"
#include <gtkmm/scrolledwindow.h>
#include <gtkmm/button.h>
#include <gtkmm/box.h>
#include <gtkmm/label.h>
#include <gtkmm/notebook.h>
#include <gtkmm/separator.h>
#include <gtkmm/buttonbox.h>

properties_glade::properties_glade(
) : Gtk::Window(Gtk::WINDOW_TOPLEVEL)
{  
   
   Gtk::Window *properties = this;
   _bindings = manage(new class Gtk::TreeView());
   
   Gtk::ScrolledWindow *scrolledwindow2 = manage(new class Gtk::ScrolledWindow());
   Gtk::Button *del = manage(new class Gtk::Button("Delete"));
   Gtk::Button *edit = manage(new class Gtk::Button("Edit..."));
   Gtk::Button *add = manage(new class Gtk::Button("Add..."));
   Gtk::HBox *hbox5 = manage(new class Gtk::HBox(false, 5));
   Gtk::VBox *vbox4 = manage(new class Gtk::VBox(false, 5));
   Gtk::Label *blabel = manage(new class Gtk::Label("Bindings"));
   Gtk::Notebook *notebook = manage(new class Gtk::Notebook());
   Gtk::HSeparator *hseparator1 = manage(new class Gtk::HSeparator());
   Gtk::Button *close = manage(new class Gtk::Button(Gtk::StockID("gtk-close")));
   Gtk::HButtonBox *hbuttonbox1 = manage(new class Gtk::HButtonBox(Gtk::BUTTONBOX_END, 0));
   Gtk::VBox *vbox3 = manage(new class Gtk::VBox(false, 5));
   _bindings->set_flags(Gtk::CAN_FOCUS);
   _bindings->set_headers_visible(true);
   _bindings->set_rules_hint(false);
   _bindings->set_reorderable(false);
   _bindings->set_enable_search(true);
   scrolledwindow2->set_policy(Gtk::POLICY_AUTOMATIC, Gtk::POLICY_AUTOMATIC);
   scrolledwindow2->add(*_bindings);
   del->set_sensitive(false);
   del->set_flags(Gtk::CAN_FOCUS);
   del->set_relief(Gtk::RELIEF_NORMAL);
   edit->set_sensitive(false);
   edit->set_flags(Gtk::CAN_FOCUS);
   edit->set_relief(Gtk::RELIEF_NORMAL);
   add->set_flags(Gtk::CAN_FOCUS);
   add->set_relief(Gtk::RELIEF_NORMAL);
   hbox5->pack_start(*del, Gtk::PACK_SHRINK, 0);
   hbox5->pack_start(*edit, Gtk::PACK_SHRINK, 0);
   hbox5->pack_start(*add, Gtk::PACK_SHRINK, 0);
   vbox4->set_border_width(5);
   vbox4->pack_start(*scrolledwindow2);
   vbox4->pack_start(*hbox5, Gtk::PACK_SHRINK, 0);
   blabel->set_alignment(0.5,0.5);
   blabel->set_padding(0,0);
   blabel->set_justify(Gtk::JUSTIFY_CENTER);
   blabel->set_line_wrap(false);
   notebook->set_flags(Gtk::CAN_FOCUS);
   notebook->set_show_tabs(true);
   notebook->set_show_border(true);
   notebook->set_tab_pos(Gtk::POS_TOP);
   notebook->set_scrollable(false);
   notebook->append_page(*vbox4, *blabel);
   notebook->pages().back().set_tab_label_packing(false, true, Gtk::PACK_START);
   close->set_flags(Gtk::CAN_FOCUS);
   close->set_relief(Gtk::RELIEF_NORMAL);
   hbuttonbox1->pack_start(*close);
   vbox3->set_border_width(5);
   vbox3->set_homogeneous(false);
   vbox3->set_spacing(5);
   vbox3->pack_start(*notebook);
   vbox3->pack_start(*hseparator1, Gtk::PACK_SHRINK, 0);
   vbox3->pack_start(*hbuttonbox1, Gtk::PACK_SHRINK, 0);
   properties->set_size_request(-1,400);
   properties->set_title("Lookuplet Properties");
   properties->set_modal(false);
   properties->property_window_position().set_value(Gtk::WIN_POS_NONE);
   properties->set_resizable(true);
   properties->add(*vbox3);
   _bindings->show();
   scrolledwindow2->show();
   del->show();
   edit->show();
   add->show();
   hbox5->show();
   vbox4->show();
   blabel->show();
   notebook->show();
   hseparator1->show();
   close->show();
   hbuttonbox1->show();
   vbox3->show();
   properties->show();
   del->signal_clicked().connect(SigC::slot(*this, &properties_glade::on_delete_clicked));
   edit->signal_clicked().connect(SigC::slot(*this, &properties_glade::on_edit_clicked));
   add->signal_clicked().connect(SigC::slot(*this, &properties_glade::on_add_clicked));
   close->signal_clicked().connect(SigC::slot(*this, &properties_glade::on_close_clicked));
}

properties_glade::~properties_glade()
{  
}
