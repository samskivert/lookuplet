// generated 2002/12/1 21:56:20 PST by mdb@baltic.(none)
// using glademm V1.1.3c_cvs
//
// DO NOT EDIT THIS FILE ! It was created using
// /usr/local/bin/glade-- --gnome2 lookuplet.glade
// for gtk 2.0.9 and gtkmm 2.0.0
//
// Please modify the corresponding derived classes in ./src/binding.cc

#include "config.h"
#include "binding_glade.hh"
#include <gtkmm/button.h>
#include <gtkmm/buttonbox.h>
#include <gtkmm/label.h>
#include <gtkmm/box.h>
#include <gtkmm/menuitem.h>
#include <gtkmm/menu.h>

binding_glade::binding_glade(
)
{  
   
   Gtk::Dialog *binding = this;
   Gtk::Button *ok = manage(new class Gtk::Button(Gtk::StockID("gtk-ok")));
   Gtk::Button *cancel = manage(new class Gtk::Button(Gtk::StockID("gtk-cancel")));
   Gtk::Label *klabel = manage(new class Gtk::Label("Key:"));
   _key = manage(new class Gtk::Entry());
   
   Gtk::Label *nlabel = manage(new class Gtk::Label("Name:"));
   _name = manage(new class Gtk::Entry());
   
   Gtk::HBox *hbox3 = manage(new class Gtk::HBox(false, 5));
   Gtk::Label *tlabel = manage(new class Gtk::Label("Enter the URL to launch or command to invoke when this key combination is pressed:"));
   Gtk::MenuItem *convertwidget4 = NULL;
   Gtk::MenuItem *convertwidget5 = NULL;
   Gtk::Menu *convertwidget3 = manage(new class Gtk::Menu());
   _type = manage(new class Gtk::OptionMenu());
   _argument = manage(new class Gtk::Entry());
   
   Gtk::HBox *hbox4 = manage(new class Gtk::HBox(false, 5));
   Gtk::Label *blabel = manage(new class Gtk::Label("The following can be used to insert the query terms into the URL or command line:\n"
		"\n"
		"%T - the plain query terms\n"
		"%U - the URL encoded query terms"));
   ok->set_flags(Gtk::CAN_FOCUS);
   ok->set_relief(Gtk::RELIEF_NORMAL);
   cancel->set_flags(Gtk::CAN_FOCUS);
   cancel->set_relief(Gtk::RELIEF_NORMAL);
   binding->get_action_area()->pack_start(*ok);
   binding->get_action_area()->pack_start(*cancel);
   klabel->set_alignment(0.5,0.5);
   klabel->set_padding(0,0);
   klabel->set_justify(Gtk::JUSTIFY_CENTER);
   klabel->set_line_wrap(false);
   _key->set_flags(Gtk::CAN_FOCUS);
   _key->set_editable(true);
   _key->set_text("");
   nlabel->set_alignment(0.5,0.5);
   nlabel->set_padding(0,0);
   nlabel->set_justify(Gtk::JUSTIFY_CENTER);
   nlabel->set_line_wrap(false);
   _name->set_flags(Gtk::CAN_FOCUS);
   _name->set_editable(true);
   _name->set_text("");
   hbox3->pack_start(*klabel, Gtk::PACK_SHRINK, 0);
   hbox3->pack_start(*_key);
   hbox3->pack_start(*nlabel, Gtk::PACK_SHRINK, 0);
   hbox3->pack_start(*_name);
   tlabel->set_alignment(0.5,0.5);
   tlabel->set_padding(0,0);
   tlabel->set_justify(Gtk::JUSTIFY_CENTER);
   tlabel->set_line_wrap(true);
   _type->set_flags(Gtk::CAN_FOCUS);
   _type->set_history(0);
   _type->set_menu(*convertwidget3);
   _argument->set_flags(Gtk::CAN_FOCUS);
   _argument->set_editable(true);
   _argument->set_text("");
   hbox4->pack_start(*_type, Gtk::PACK_SHRINK, 0);
   hbox4->pack_start(*_argument);
   blabel->set_alignment(0.5,0.5);
   blabel->set_padding(0,0);
   blabel->set_justify(Gtk::JUSTIFY_FILL);
   blabel->set_line_wrap(true);
   binding->get_vbox()->set_homogeneous(false);
   binding->get_vbox()->set_spacing(8);
   binding->get_vbox()->pack_start(*hbox3);
   binding->get_vbox()->pack_start(*tlabel, Gtk::PACK_SHRINK, 0);
   binding->get_vbox()->pack_start(*hbox4);
   binding->get_vbox()->pack_start(*blabel, Gtk::PACK_SHRINK, 0);
   binding->set_border_width(5);
   binding->set_title("Edit Binding");
   binding->set_modal(false);
   binding->property_window_position().set_value(Gtk::WIN_POS_NONE);
   binding->set_resizable(true);
   ok->show();
   cancel->show();
   klabel->show();
   _key->show();
   nlabel->show();
   _name->show();
   hbox3->show();
   tlabel->show();
   convertwidget4->show();
   convertwidget5->show();
   convertwidget3->show();
   _type->show();
   _argument->show();
   hbox4->show();
   blabel->show();
   binding->show();
   ok->signal_clicked().connect(SigC::slot(*this, &binding_glade::on_ok_clicked));
   cancel->signal_clicked().connect(SigC::slot(*this, &binding_glade::on_cancel_clicked));
   _key->signal_key_press_event().connect(SigC::slot(*this, &binding_glade::on_key_key_press_event));
}

binding_glade::~binding_glade()
{  
}
